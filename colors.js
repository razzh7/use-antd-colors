import path from 'node:path';
import {
  blue,
  geekblue,
  green,
  orange,
  presetDarkPalettes,
  presetPalettes,
  red,
} from '@ant-design/colors';
import fs from 'fs-extra';
import { line } from './util.js';

let colorTemplate = '// DONT EDIT AUTO GENERATED BY ANTD COLORS\n';
let lightStatusTemplate = '';
let darkStatusTemplate = '';
const colorVarsMap = {
  primary: blue,
  success: green,
  danger: red,
  warning: orange,
  link: geekblue,
};

function generateColorFile() {
  // light
  Object.keys(presetPalettes).forEach((key) => {
    const colors = presetPalettes[key];

    colors.forEach((color, idx) => {
      colorTemplate += `@${key}-${idx + 1}: ${color};\n`;
    });

    colorTemplate += '\n';
  });

  // dark
  Object.keys(presetDarkPalettes).forEach((key) => {
    const colors = presetDarkPalettes[key];

    colors.forEach((color, idx) => {
      colorTemplate += `@dark-${key}-${idx + 1}: ${color};\n`;
    });
    colorTemplate += '\n';
  });

  fs.outputFile(path.resolve('./colors.less'), colorTemplate);
}

function generateLessStatusVars() {
  const colorsVarsArr = Object.keys(colorVarsMap);
  colorsVarsArr.forEach((key, vi) => {
    const colors = colorVarsMap[key];
    colors.forEach((color, idx) => {
      const ci = idx + 1;
      if (key === 'primary') {
        lightStatusTemplate += `@${key}-${ci}: rgb(var(--primary-${ci}));\n`;
        darkStatusTemplate += `@dark-${key}-${ci}: rgb(var(--primary-${ci}));\n`;
        return;
      }
      const canLine = line(vi, colorsVarsArr.length, idx, colors.length);
      lightStatusTemplate += `@${key}-${ci}: rgb(var(--${key}-${ci}));\n`;
      darkStatusTemplate += `@dark-${key}-${ci}: rgb(var(--${key}-${ci}));${canLine}`;
    });

    lightStatusTemplate += '\n';
  });

  fs.outputFile(path.resolve('./colors.less'), `${colorTemplate}${lightStatusTemplate}${darkStatusTemplate}`);
}

export function generatorColors() {
  generateColorFile();
  generateLessStatusVars();
}
